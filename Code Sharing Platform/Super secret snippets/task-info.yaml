type: edu
files:
- name: src/platform/CodeSharingPlatform.java
  visible: true
  text: |
    package platform;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.web.bind.annotation.RestController;

    @SpringBootApplication
    @RestController
    public class CodeSharingPlatform {

        public static void main(String[] args) {
            SpringApplication.run(CodeSharingPlatform.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CodeSharingPlatformTest.java
  visible: false
  text: |
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.PresentationError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.nodes.Element;
    import org.jsoup.select.Elements;
    import platform.CodeSharingPlatform;

    import java.util.HashMap;
    import java.util.Map;

    import static org.hyperskill.hstest.common.Utils.sleep;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isNumber;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class CodeSharingPlatformTest extends SpringTest {
        public CodeSharingPlatformTest() {
            super(CodeSharingPlatform.class, "../snippets.mv.db");
        }

        final String API_CODE = "/api/code/";
        final String WEB_CODE = "/code/";

        final String API_CODE_NEW = "/api/code/new";
        final String WEB_CODE_NEW = "/code/new";

        final String API_LATEST = "/api/code/latest";
        final String WEB_LATEST = "/code/latest";

        final String[] SNIPPETS = {
            "public static void ...",
            "class Code { ...",
            "Snippet #3",
            "Snippet #4",
            "Snippet #5",
            "Snippet #6",
            "Snippet #7",
            "Snippet #8",
            "Snippet #9",
            "Snippet #10",
            "Snippet #11",
            "Snippet #12",
            "Snippet #13",
            "Snippet #14",

            "Snippet #15",
            "Snippet #16",
            "Snippet #17",
            "Snippet #18",
            "Snippet #19",
            "Snippet #20",
            "Snippet #21",
            "Snippet #22",
        };

        final Map<Integer, String> ids = new HashMap<>();
        final Map<Integer, String> dates = new HashMap<>();
        final Map<Integer, Integer> secs = new HashMap<>();
        final Map<Integer, Integer> views = new HashMap<>();

        boolean checkSecret = false;
        long freezeTime = 0;
        long awaitTime = 0;
        long sleepDurationSec = 0;
        long sleepLowerBound = 0;
        long sleepUpperBound = 0;

        static String th(int val) {
            if (val == 1) {
                return "" + val + "st";
            } else if (val == 2) {
                return "" + val + "nd";
            } else if (val == 3) {
                return "" + val + "rd";
            } else {
                return "" + val + "th";
            }
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkTitle(Document doc, String url, String title) {
            if (!doc.title().equals(title)) {
                throw new WrongAnswer("GET " + url +
                    " should contain title \"" + title + "\"");
            }
        }

        static Element getSingleTag(Element doc, String url, String tag) {
            Elements elems = getElemsByTag(doc, url, tag, 1);
            return elems.get(0);
        }

        static Elements getElemsByTag(Element doc, String url, String tag, int length) {
            Elements elems = doc.getElementsByTag(tag);
            if (elems.size() != length) {
                throw new WrongAnswer("GET " + url +
                    " should contain " + length + " <" + tag + "> " +
                    "element"+ (length == 1 ? "" : "s") +", found: " + elems.size());
            }
            return elems;
        }

        static Element getById(Element doc, String url, String id, String tag) {
            Element elem = doc.getElementById(id);

            if (elem == null) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id \"" + id + "\", no one found");
            }

            if (!elem.tagName().equals(tag)) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id  \"" + id + "\" and tag \"" + tag + "\", " +
                    "found another tag: \"" + elem.tagName() + "\"");
            }

            return elem;
        }

        static void checkMissingId(Element doc, String url, String id) {
            Element elem = doc.getElementById(id);
            if (elem != null) {
                throw new WrongAnswer("GET " + url +
                    " shouldn't contain an element with id \"" + id + "\", but one was found");
            }
        }

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[] {
            // test 1
            this::checkWebCodeNew,

            // test 2
            () -> postSnippet(0),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiLatest(0),
            () -> checkWebLatest(0),

            // test 7
            () -> postSnippet(1),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiLatest(1, 0),
            () -> checkWebLatest(1, 0),

            // test 14
            () -> postSnippet(2),
            () -> postSnippet(3),
            () -> postSnippet(4),
            () -> postSnippet(5),
            () -> postSnippet(6),
            () -> postSnippet(7),
            () -> postSnippet(8),
            () -> postSnippet(9),
            () -> postSnippet(10),
            () -> postSnippet(11),
            () -> postSnippet(12),
            () -> postSnippet(13),

            // test 26
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 54
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 56
            this::reloadServer,

            // test 57
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 85
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 87
            () -> postSnippet(14),
            () -> postSnippet(15, 100, 20),
            () -> postSnippet(16),
            () -> postSnippet(17, 0, 5),
            () -> postSnippet(18),
            () -> postSnippet(19, 3, 0),
            () -> postSnippet(20),
            () -> postSnippet(21, 30, 0),

            // test 95
            () -> checkApiCode(14),
            () -> checkWebCode(14),
            () -> checkApiCode(16),
            () -> checkWebCode(16),
            () -> checkApiCode(18),
            () -> checkWebCode(18),
            () -> checkApiCode(20),
            () -> checkWebCode(20),

            // test 103
            () -> {
                freezeTime = System.currentTimeMillis();
                sleep(5000);
                return reloadServer();
            },

            // test 104
            () -> {
                awaitTime = System.currentTimeMillis();
                sleepDurationSec = (awaitTime - freezeTime) / 1000;
                sleepLowerBound = sleepDurationSec;
                sleepUpperBound = sleepLowerBound + 10;
                checkSecret = true;
                return CheckResult.correct();
            },

            // test 105
            () -> checkApiCode(15),
            () -> checkWebCode(15),
            () -> checkApiCode(17),
            () -> checkWebCode(17),
            () -> checkApiCode404(19),
            () -> checkWebCode404(19),
            () -> checkApiCode(21),
            () -> checkWebCode(21),

            // test 113
            () -> checkApiLatest(20, 18, 16, 14, 13, 12, 11, 10, 9, 8),
            () -> checkWebLatest(20, 18, 16, 14, 13, 12, 11, 10, 9, 8),

            // test 115
            () -> checkApiCode(17),
            () -> checkApiCode(17),
            () -> checkWebCode(17),
            () -> checkApiCode404(17),
            () -> checkWebCode404(17),
        };

        private CheckResult checkApiCode(int id) {
            String codeId = ids.get(id);
            String snippet = SNIPPETS[id];
            int time = secs.get(id);
            int views = this.views.get(id);

            HttpResponse resp = get(API_CODE + codeId).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", snippet)
                    .value("date", isString(s -> {
                        if (dates.containsKey(id)) {
                            return s.equals(dates.get(id));
                        }
                        dates.put(id, s);
                        return true;
                    }))
                    .value("time", isInteger(i -> {
                        if (!checkSecret || time == 0) {
                            return i == 0;
                        }
                        int upperBound = (int) (time - sleepLowerBound);
                        int lowerBound = (int) (time - sleepUpperBound);
                        return i >= lowerBound && i <= upperBound;
                    }))
                    .value("views", isInteger(i -> {
                        if (!checkSecret || views == 0) {
                            return i == 0;
                        }
                        boolean result = i == views - 1;
                        this.views.put(id, views - 1);
                        return result;
                    }))

            );

            return CheckResult.correct();
        }

        private CheckResult checkApiCode404(int id) {
            HttpResponse resp = get(API_CODE + ids.get(id)).send();
            checkStatusCode(resp, 404);
            return CheckResult.correct();
        }

        private CheckResult checkWebCode(int id) {
            String codeId = ids.get(id);
            String apiSnippet = SNIPPETS[id];
            String apiDate = dates.get(id);
            int time = secs.get(id);
            int views = this.views.get(id);

            String req = WEB_CODE + codeId;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Code");

            Element pre = getById(doc, req, "code_snippet", "pre");
            Element code = getSingleTag(pre, req, "code");

            String webSnippetCode = code.text();
            if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                return CheckResult.wrong("Web code snippet " +
                    "and api code snippet are different");
            }

            Element date = getById(doc, req, "load_date", "span");
            String webSnippetDate = date.text();
            if (!webSnippetDate.trim().equals(apiDate.trim())) {
                return CheckResult.wrong("Web snippet date " +
                    "and api snippet date are different");
            }

            if (time != 0) {
                Element timeSpan = getById(doc, req, "time_restriction", "span");
                String timeText = timeSpan.text();
                int timeOnPage;
                try {
                    timeOnPage = expect(timeText).toContain(1).integers().get(0);
                } catch (PresentationError ex) {
                    return CheckResult.wrong(
                        "GET " + req + " cannot find number of seconds inside \"time_restriction\" span element.\n" +
                        "Full text:\n" + timeSpan
                    );
                }
                int upperBound = (int) (time - sleepLowerBound);
                int lowerBound = (int) (time - sleepUpperBound);

                if (!(timeOnPage >= lowerBound && timeOnPage <= upperBound)) {
                    return CheckResult.wrong("GET " + req + " should " +
                        "contain time restriction between " + lowerBound
                        + " and " + upperBound + ", found: " + timeOnPage + "\n" +
                        "Full text:\n" + timeSpan);
                }
            } else {
                checkMissingId(doc, req, "time_restriction");
            }

            if (views != 0) {
                Element viewsSpan = getById(doc, req, "views_restriction", "span");
                String viewsText = viewsSpan.text();
                int viewsOnPage = expect(viewsText).toContain(1).integers().get(0);

                if (viewsOnPage != views - 1) {
                    return CheckResult.wrong("GET " + req + " should " +
                        "contain views restriction equal to " + (views - 1)
                        + ", found: " + viewsOnPage + "\n" +
                        "Full text:\n" + viewsSpan);
                }
                this.views.put(id, views - 1);
            } else {
                checkMissingId(doc, req, "views_restriction");
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebCode404(int id) {
            HttpResponse resp = get(WEB_CODE + ids.get(id)).send();
            checkStatusCode(resp, 404);
            return CheckResult.correct();
        }

        private CheckResult checkWebCodeNew() {
            HttpResponse resp = get(WEB_CODE_NEW).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE_NEW, "Create");

            getById(doc, WEB_CODE_NEW, "code_snippet", "textarea");
            getById(doc, WEB_CODE_NEW, "send_snippet", "button");

            return CheckResult.correct();
        }

        private CheckResult postSnippet(int id) {
            return postSnippet(id, 0, 0);
        }

        private CheckResult postSnippet(int id, int secs, int views) {
            String snippet = SNIPPETS[id];
            this.secs.put(id, secs);
            this.views.put(id, views);

            HttpResponse resp = post(API_CODE_NEW,
                "{\"code\":\"" + snippet + "\", " +
                    "\"time\": " + secs +", " +
                    "\"views\": " + views + "}").send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isString(i -> {
                        if (i.length() != 36) {
                            return false;
                        }
                        ids.put(id, "" + i);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkApiLatest(int... ids) {
            String req = API_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(ids.length, isObject()
                    .value("code", isString())
                    .value("date", isString())
                    .value("time", isInteger(i -> i == 0,
                        "should be equal to 0 (latest snippets should not contain time restrictions)"))
                    .value("views", isInteger(i -> i == 0,
                        "should be equal to 0 (latest snippets should not contain time restrictions)"))
                )
            );

            JsonArray elem = resp.getJson().getAsJsonArray();
            for (int i = 0; i < ids.length; i++) {
                JsonObject item = elem.get(i).getAsJsonObject();

                String actualSnippet = SNIPPETS[ids[i]];
                String actualDate = dates.get(ids[i]);

                String givenSnippet = item.get("code").getAsString();
                String givenDate = item.get("date").getAsString();

                if (!actualSnippet.equals(givenSnippet)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet doesn't match actual snippet.\n" +
                        "Expected:\n" + actualSnippet + "\n" +
                        "Found:\n" + givenSnippet);
                }

                if (!actualDate.equals(givenDate)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet's date doesn't match actual snippet's date.\n" +
                        "Expected:\n" + actualDate + "\n" +
                        "Found:\n" + givenDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebLatest(int... ids) {
            String req = WEB_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Latest");

            Elements preList = getElemsByTag(doc, req, "pre", ids.length);
            Elements spanList = getElemsByTag(doc, req, "span", ids.length);

            for (int i = 0; i < ids.length; i++) {
                String apiSnippet = SNIPPETS[ids[i]];
                String apiDate = dates.get(ids[i]);
                Element pre = preList.get(i);

                String webSnippetCode = pre.text();
                if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet doesn't match " + th(i + 1) + " snippet via api.\n" +
                        "Expected:\n" + apiSnippet + "\n" +
                        "Found:\n" + webSnippetCode);
                }

                Element date = spanList.get(i);
                String webSnippetDate = date.text();
                if (!webSnippetDate.trim().equals(apiDate.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet's date doesn't match " + th(i + 1)
                        + " snippet's date via api.\n" +
                        "Expected:\n" + apiDate + "\n" +
                        "Found:\n" + webSnippetDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new RuntimeException(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/platform/CodeRepository.java
  visible: true
  text: |
    package platform;

    import org.springframework.data.domain.Sort;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.List;
    import java.util.Optional;

    @Repository
    public interface CodeRepository extends JpaRepository<Code, Long> {
        @Override
        List<Code> findAll();

        @Override
        <S extends Code> S save(S entity);

        @Override
        Optional<Code> findById(Long aLong);

        @Override
        long count();
    }
  learner_created: true
- name: src/resources/templates/code_template.ftlh
  visible: true
  text: |-
    <!DOCTYPE html>
    <html>
    <head>
        <title>Code</title>
        <link rel="stylesheet"
              href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/styles/default.min.css">
        <script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/highlight.min.js"></script>
        <script>hljs.initHighlightingOnLoad();</script>
    </head>
    <body>
    <div>
    <span id="load_date" style="color: green">${load_date_str}</span>
    <pre id="code_snippet" style=" border-style: solid; border-width: 1px;width: 600px"><code>${code}</code></pre>
    <!-- padding: 10px; background-color: lightgray; -->
    </div>
    </body>
    </html>
  learner_created: true
- name: src/platform/Controller.java
  visible: true
  text: |
    package platform;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.cglib.core.Local;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.servlet.ModelAndView;

    import javax.servlet.http.HttpServletResponse;
    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;
    import java.util.*;

    @RestController
    @CrossOrigin
    public class Controller {

        @Autowired
        Code code = new Code();

        @Autowired
        CodeService service;

        private List<Code> code_list = new ArrayList<>();//Arrays.asList(code)


        /*@GetMapping(path="/code")
        public ResponseEntity<Object> getCodeHtml() {
            HttpHeaders headers = new HttpHeaders();
            headers.add("Content-Type", "text/html");
            return new ResponseEntity<>(code.getCode_html(), headers, HttpStatus.OK);
        }*/

        @GetMapping(path="/code/{N}", produces = "text/html")
        public ModelAndView getCodeHtml(@PathVariable("N") int N) {
            //HttpHeaders headers = new HttpHeaders();
            //headers.add("Content-Type", "text/html");
            //return new ResponseEntity<>(code.getCode_html(), headers, HttpStatus.OK);
            //response.addHeader("Content-Type", "text/html");
            ModelAndView model = new ModelAndView("code_template");

            Map<String, Object> map = (Map<String, Object>) getApiCodeByID(N).getBody();
            //model.addObject("code", code.getCode());
            //System.out.println(map);
            //System.out.println(map.get("date"));
            model.addObject("code", map.get("code"));
            model.addObject("load_date_str", map.get("date"));
            model.setStatus(HttpStatus.OK);
            return model;
        }

        @GetMapping(path="/code/latest", produces = "text/html")
        public ModelAndView getCodeList() {
            List<Code> tail = (List<Code>) getApiCode().getBody();
            //response.addHeader("Content-Type", "text/html");
            //HttpHeaders headers = new HttpHeaders();
            //headers.add("Content-Type", "text/html");
            ModelAndView model = new ModelAndView("code_list");
            model.addObject("code_list", tail);
            model.setStatus(HttpStatus.OK);
            return model;
        }

        @GetMapping(path="/code/new")
        public ResponseEntity<Object> getCodeNew() {
            HttpHeaders headers = new HttpHeaders();
            headers.add("Content-Type", "text/html");
            return new ResponseEntity<>(code.getNew_code_html(), headers, HttpStatus.OK);
        }

        @GetMapping(path="/api/code/{N}")
        public ResponseEntity<Object> getApiCodeByID(@PathVariable("N") int N) {

            HttpHeaders headers = new HttpHeaders();
            headers.add("Content-Type", "application/json");

            Code code = service.findById(N).orElse(null);

            if (code != null ) {
                Map<String, Object> map = new LinkedHashMap<String, Object>();
                //map.put("code", code_list.get(N-1).getCode());
                //map.put("date", code_list.get(N-1).getLoad_date_str());
                map.put("code", code.getCode());
                map.put("date", code.getLoad_date_str());

                return new ResponseEntity<>(map, headers, HttpStatus.OK);
            }

            return new ResponseEntity<>(String.format("ID %s not found", Integer.toString(N)), headers, HttpStatus.BAD_REQUEST);

        }

        @GetMapping(path="/api/code/latest")
        public ResponseEntity<Object> getApiCode() {

            HttpHeaders headers = new HttpHeaders();
            headers.add("Content-Type", "application/json");

            Map<String, Object> map = new LinkedHashMap<String, Object>();
            List<Code> code_list = service.findAll();
            List<Code> tail = new ArrayList<>(code_list.subList(Math.max(code_list.size() - 10, 0), code_list.size()));
            Collections.reverse(tail);

            //map.put("code", code_list.get(N-1).getCode());
            //map.put("date", code_list.get(N-1).getLoad_date_str());

            return new ResponseEntity<>(tail, headers, HttpStatus.OK);

        }

        /*@PostMapping(path="/api/code/new")
        public ResponseEntity<Object> postApiCode(@RequestBody Code new_code) {

            HttpHeaders headers = new HttpHeaders();
            headers.add("Content-Type", "application/json");

            code.setCode(new_code.getCode());
            code.setLoad_date(new_code.getLoad_date());
            code.setLoad_date_str();
            code.setCode_html();

            code_list.add(new_code);

            Map<String, String> map = new HashMap<>();
            int id = code_list.size();
            new_code.setId(id);
            map.put("id",Integer.toString(id));

            return new ResponseEntity<>(map, headers, HttpStatus.OK);

        }*/

        @PostMapping(path="/api/code/new")
        public ResponseEntity<Object> postApiCodeRepo(@RequestBody Code new_code) {

            HttpHeaders headers = new HttpHeaders();
            headers.add("Content-Type", "application/json");

            Map<String, String> map = new HashMap<>();
            long id = service.count()+1;
            new_code.setId(id);
            map.put("id",Long.toString(id));

            service.save(new_code);

            return new ResponseEntity<>(map, headers, HttpStatus.OK);

        }


    }
  learner_created: true
- name: src/platform/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html>
    <head>
        <title>Create</title>
    </head>
    <body>
    <script>
        function send() {
        let object = {
            "code": document.getElementById("code_snippet").value
        };

        let json = JSON.stringify(object);

        let xhr = new XMLHttpRequest();
        xhr.open("POST", '/api/code/new', false)
        xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
        xhr.send(json);

        if (xhr.status == 200) {
          alert("Success!");
        }
    }
    </script>
    <span>Datetime</span>
    <form action="http://localhost:8889/api/code" method="post">
        <textarea name="input-text" style="width: 600px; height: 100px; border-style: dotted" placeholder="// Write your code here"><pre id="code_snippet">{}</pre></textarea>
        <br>
        <button type="submit">Submit</button>
    </form>
    </body>
    </html>
  learner_created: true
- name: src/platform/CodeService.java
  visible: true
  text: |
    package platform;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.data.domain.Sort;
    import org.springframework.stereotype.Service;

    import java.util.List;
    import java.util.Optional;

    @Service
    public class CodeService {

        @Autowired
        CodeRepository repository;

        // save
        void save(Code code) {
            repository.save(code);
        }

        // find by id
        Optional<Code> findById(long id) {
            return repository.findById(id);
        }

        // find all
        List<Code> findAll() {
            return repository.findAll();//Sort.by("load_date").descending()
        }

        // count
        long count() {
            return repository.count();
        }
    }
  learner_created: true
- name: src/platform/Code.java
  visible: true
  text: "package platform;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\
    import com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.cglib.core.Local;\n\
    import org.springframework.stereotype.Component;\n\nimport javax.persistence.*;\n\
    import java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\
    @Component\n@Entity\n@Table\npublic class Code {\n\n    @Id\n    @JsonIgnore\n\
    \    private long id;\n    @Transient\n    @JsonIgnore\n    private static final\
    \ String DATE_FORMATTER= \"yyyy/MM/dd HH:mm:ss\";\n    @Column\n    private String\
    \ code;\n    @Transient\n    @JsonIgnore\n    private String code_html;\n    @Transient\n\
    \    @JsonIgnore\n    private String new_code_html;\n    @Transient\n    @JsonIgnore\n\
    \    private LocalDateTime load_date;\n    @Column\n    @JsonProperty(value=\"\
    date\")\n    private String load_date_str;\n    @Transient\n    @JsonIgnore\n\
    \    private String template = \"\"\"\n                <!DOCTYPE html>\n     \
    \           <html>\n                <head>\n                    <title>Code</title>\n\
    \                </head>\n                <body>\n                <div>\n    \
    \            <span id=\"load_date\" style=\"color: green\">%s</span>\n       \
    \         <pre id=\"code_snippet\" style=\"padding: 10px; border-style: solid;\
    \ background-color: lightgray; border-width: 2px;max-width: 600px\">%s</pre>\n\
    \                </div>\n                </body>\n                </html>\n  \
    \              \"\"\";\n    @Transient\n    @JsonIgnore\n    private String new_template\
    \ = \"\"\"\n                <!DOCTYPE html>\n                <html>\n        \
    \        <head>\n                    <title>Create</title>\n                </head>\n\
    \                <body>\n                <script>\n                    function\
    \ send() {\n                    let object = {\n                        \"code\"\
    : document.getElementById(\"code_snippet\").value\n                    };\n  \
    \                              \n                    let json = JSON.stringify(object);\n\
    \                                \n                    let xhr = new XMLHttpRequest();\n\
    \                    xhr.open(\"POST\", '/api/code/new', false)\n            \
    \        xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n\
    \                    xhr.send(json);\n                                \n     \
    \               if (xhr.status == 200) {\n                      alert(\"Success!\"\
    );\n                    }\n                }\n                </script>\n    \
    \            <div>\n            \n                <textarea id=\"code_snippet\"\
    \ style=\"padding: 5px;width: 600px; height: 100px\">// write your code here</textarea>\n\
    \                <br>\n                <button id=\"send_snippet\" type=\"submit\"\
    \ onclick=\"send()\">Submit</button>\n                </div>\n               \
    \ </body>\n                </html>\n                \"\"\";\n\n    public Code(String\
    \ code) {\n        this.code = code;\n    }\n\n    public Code() {\n        this.code\
    \ =\"public static void main(String[] args) {\\n    SpringApplication.run(CodeSharingPlatform.class,\
    \ args);\\n}\";\n        this.load_date = LocalDateTime.now();\n        setLoad_date_str();\n\
    \        this.code_html = String.format(template, this.getLoad_date_str(), this.getCode());\n\
    \        this.new_code_html = new_template;\n    }\n\n    public String getCode()\
    \ {\n        return code;\n    }\n\n    public void setCode(String code) {\n \
    \       this.code = code;\n    }\n\n    public String getCode_html() {\n     \
    \   return code_html;\n    }\n\n    public void setCode_html() {\n        this.code_html\
    \ = String.format(template, this.getLoad_date_str(), this.getCode());;\n    }\n\
    \n    public LocalDateTime getLoad_date() {\n        return load_date;\n    }\n\
    \n    public void setLoad_date(LocalDateTime load_date) {\n        this.load_date\
    \ = load_date;\n    }\n\n    public String getLoad_date_str() {\n        return\
    \ load_date_str;\n    }\n\n    public void setLoad_date_str() {\n        DateTimeFormatter\
    \ formatter = DateTimeFormatter.ofPattern(DATE_FORMATTER);\n        this.load_date_str\
    \ = this.load_date.format(formatter);\n    }\n\n    public String getNew_code_html()\
    \ {\n        return new_code_html;\n    }\n\n    public void setNew_code_html(String\
    \ new_code_html) {\n        this.new_code_html = new_code_html;\n    }\n\n   \
    \ public long getId() {\n        return id;\n    }\n\n    public void setId(long\
    \ id) {\n        this.id = id;\n    }\n}\n"
  learner_created: true
- name: src/resources/templates/code_list.ftlh
  visible: true
  text: |-
    <!DOCTYPE html>
    <html>
    <head>
        <title>Latest</title>
        <link rel="stylesheet"
              href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/styles/default.min.css">
        <script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/highlight.min.js"></script>
        <script>hljs.initHighlightingOnLoad();</script>
    </head>
    <body>

    <table>
        <#list code_list as code>
            <tr>
                <td>
                    <span id="load_date" style="color: green">${code.load_date_str}</span>
                    <br>
                    <pre id="code_snippet" style="border-style: solid; border-width: 1px;width: 600px"><code>${code.code}</code></pre>
                    <!-- padding: 10px; background-color: lightgray; -->
                    </td>
            </tr>
        </#list>
    </table>

    </body>
    </html>
  learner_created: true
- name: src/resources/templates/new_template.ftlh
  visible: true
  learner_created: true
- name: src/resources/templates/error_template.ftlh
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11031#comment
status: Failed
feedback:
  message: |2

    FAILURE: Build failed with an exception.

    * What went wrong:
    Could not resolve all files for configuration &#39;classpath&#39;.
    &gt; Could not resolve com.github.hyperskill:hs-gradle-plugin:release-SNAPSHOT.
      Required by:
          unspecified:unspecified:unspecified
       &gt; Could not resolve com.github.hyperskill:hs-gradle-plugin:release-SNAPSHOT.
          &gt; Unable to load Maven meta-data from https://packages.jetbrains.team/maven/p/academy/hyperskill-hspc/com/github/hyperskill/hs-gradle-plugin/release-SNAPSHOT/maven-metadata.xml.
             &gt; Could not HEAD &#39;https://packages.jetbrains.team/maven/p/academy/hyperskill-hspc/com/github/hyperskill/hs-gradle-plugin/release-SNAPSHOT/maven-metadata.xml&#39;.
                &gt; The server may not support the client&#39;s requested TLS protocol versions: (TLSv1.2, TLSv1.3). You may need to configure the client to allow other protocols to be used. See: https://docs.gradle.org/7.3.3/userguide/build_environment.html#gradle_system_properties
                   &gt; PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
       &gt; Could not resolve com.github.hyperskill:hs-gradle-plugin:release-SNAPSHOT.
          &gt; Unable to load Maven meta-data from https://jitpack.io/com/github/hyperskill/hs-gradle-plugin/release-SNAPSHOT/maven-metadata.xml.
             &gt; Could not HEAD &#39;https://jitpack.io/com/github/hyperskill/hs-gradle-plugin/release-SNAPSHOT/maven-metadata.xml&#39;.
                &gt; Can&#39;t assign requested address

    * Try:
    &gt; Run with --stacktrace option to get the stack trace.
    &gt; Run with --info or --debug option to get more log output.
    &gt; Run with --scan to get full insights.

    * Get more help at https://help.gradle.org

    BUILD FAILED in 4s
  time: "Wed, 28 Dec 2022 18:19:15 UTC"
record: -1
